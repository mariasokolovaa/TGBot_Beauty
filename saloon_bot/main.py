"""
–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram
"""
from datetime import datetime
from telebot import types, TeleBot
from telebot.types import CallbackQuery, ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
import telebot_calendar
from google_sheet import GoogleSheets, get_cache_services
from keyboards import create_markup_menu, button_to_menu
import clear_dict

bot = TeleBot(TOKEN)

CLIENT_PHONE = {467168798: '+79522600066', 288041146: '+79215528067'}  # sql —Å–¥–µ–ª–∞—Ç—å


def get_client_id(client_id, client_username) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param client_id: id —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param client_username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: 'id: id @username tel: phone'"""
    id_client = f"id: {str(client_id)}\n@{str(client_username)}\n"
    if CLIENT_PHONE.get(client_id, None) is not None:
        if CLIENT_PHONE[client_id] != '':
            id_client += 'tel: ' + CLIENT_PHONE[client_id]
        else:
            id_client += 'tel: None'
    return id_client


def create_client(chat_id) -> GoogleSheets:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç GoogleSheet –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(clear_dict.CLIENT_DICT.get(chat_id))
    if clear_dict.CLIENT_DICT.get(chat_id):
        return clear_dict.CLIENT_DICT[chat_id]
    client = GoogleSheets(chat_id)
    clear_dict.CLIENT_DICT[chat_id] = client
    clear_dict.TIMER_DICT[chat_id] = datetime.now()
    return client


@bot.message_handler(commands=['start'])
def check_phone_number(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–¥–∏–Ω–æ–∂–¥—ã"""

    if CLIENT_PHONE.get(message.chat.id, None) is None:
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üìû",
                                            request_contact=True)
        markup.add(button_phone)
        bot.send_message(message.chat.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                         reply_markup=markup)

        @bot.message_handler(content_types=['contact'])
        def contact(message_contact):
            """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç <contact> -> –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
            if message_contact.contact is not None:
                CLIENT_PHONE[message_contact.chat.id] = message_contact.contact.phone_number
                bot.send_message(message_contact.chat.id,
                                 text='–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!',
                                 reply_markup=ReplyKeyboardRemove())
                menu(message_contact)
    else:
        menu(message)


@bot.message_handler(content_types=['text'])
def any_word_before_number(message_any):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(message_any.chat.id,
                     text='–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n'
                          '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∞–º–∏.')


def menu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    clear_dict.clear_unused_info(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                     reply_markup=create_markup_menu())


@bot.callback_query_handler(lambda call: call.data == 'CANCEL_RECORD')
def cancel_record(call):
    """
    InlineKeyboardMarkup - –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    """
    client = create_client(call.message.chat.id)
    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    if len(records) != 0:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            *[InlineKeyboardButton(text=' - '.join(x[:3]),
                                   callback_data=f'CANCEL {ind}'
                                   ) for ind, x in enumerate(records)])
        markup.add(*button_to_menu(return_callback=None,
                                   menu_text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?üôà',
                              reply_markup=markup
                              )
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–û—Ç–º–µ–Ω—è—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ ü§∑'
                              )
        check_phone_number(call.message)


@bot.callback_query_handler(lambda call: call.data.startswith('CANCEL'))
def approve_cancel(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    """
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(*[InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
                                      callback_data='APPROVE' + call.data),
                 InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                      callback_data='MENU')])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text='–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?',
                          reply_markup=markup)


@bot.callback_query_handler(lambda call: call.data.startswith('APPROVE'))
def set_cancel(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    """
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        client_info = client.lst_records[int(call.data.split()[1])]
        client.date_record, client.time_record, client.name_service, client.name_master = client_info
        client_id = get_client_id(call.message.chat.id, call.from_user.username)
        if client.set_time('', client_id):
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.')
        check_phone_number(call.message)
    else:
        go_to_menu(call)


@bot.callback_query_handler(lambda call: call.data == 'MY_RECORD')
def show_record(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = create_client(call.message.chat.id)

    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    rec = ''
    if len(records) != 0:
        rec += '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n'
        for i in sorted(records, key=lambda x: (x[0], x[1], x[2])):
            rec += 'ü™∑' + ' - '.join(i) + '\n'
    else:
        rec = '–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üîç'
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=rec
                          )
    check_phone_number(call.message)


@bot.callback_query_handler(lambda call: call.data == 'RECORD')
def choice_service(call):
    """
    InlineKeyboardMarkup
    –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """
    create_client(call.message.chat.id)

    all_serv = get_cache_services()
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(*[InlineKeyboardButton(text=x,
                                      callback_data='SERVICE' + x
                                      ) for x in all_serv.keys()])
    markup.add(*button_to_menu(None))
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('SERVICE'))
def choice_master(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
    """
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        client.name_service = call.data[len('SERVICE'):]
        dct = get_cache_services()
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*[InlineKeyboardButton(text=x,
                                          callback_data='MASTER' + x
                                          ) for x in dct[client.name_service]])
        markup.add(InlineKeyboardButton(text='–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä',
                                        callback_data='MASTER' + '–õ–Æ–ë–û–ô'))
        markup.add(*button_to_menu('RECORD'))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏ –ú–∞—Å—Ç–µ—Ä–∞:",
                              reply_markup=markup)
    else:
        go_to_menu(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('MASTER'))
def choice_date(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –¥–∞—Ç—ã
    """
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        if call.data[len('MASTER'):] != '–õ–Æ–ë–û–ô':
            client.name_master = call.data[len('MASTER'):]
        else:
            client.name_master = None
        lst = client.get_all_days()
        lst = list(map(lambda x: datetime.strptime(x, '%d.%m.%y').date(), lst))
        if len(lst) == 0:
            service = client.name_service if client.name_service else '–õ–Æ–ë–û–ô'
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(*button_to_menu('SERVICE' + service))
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç!\n"
                                       "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞üòâ",
                                  reply_markup=markup)
        else:
            client.lst_currant_date = lst
            clear_dict.CALENDAR_DICT[call.message.chat.id] = str(call.message.chat.id)
            bot.edit_message_text(chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:\n ‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è',
                                  reply_markup=telebot_calendar.create_calendar(
                                      name='CALENDAR' + clear_dict.CALENDAR_DICT[call.message.chat.id],
                                      lst_current_date=lst)
                                  )
    else:
        go_to_menu(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('CALENDAR'))
def choice_time(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    """
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if not client:
        client = create_client(call.message.chat.id)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if client:
        lst = client.lst_currant_date
        # At this point, we are sure that this calendar is ours. So we cut the line by the separator of our calendar
        name, action, year, month, day = call.data.split(':')
        # Processing the calendar. Get either the date or None if the buttons are of a different type
        telebot_calendar.calendar_query_handler(
            bot=bot, call=call, name=name, action=action, year=year, month=month, day=day,
            lst_currant_date=lst
        )

        if action == "DAY":
            client.date_record = datetime(int(year), int(month), int(day)).strftime('%d.%m.%y')
            lst_times = client.get_free_time()
            client.dct_currant_time = lst_times

            markup = InlineKeyboardMarkup(row_width=3)
            markup.add(*[InlineKeyboardButton(text=x,
                                              callback_data='TIME' + x
                                              ) for x in lst_times])
            master = 'MASTER' + (client.name_master if client.name_master else '–õ–Æ–ë–û–ô')
            markup.add(*button_to_menu(master))
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if len(lst_times) != 0 else "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n" \
                                                                 "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –¥–∞—Ç—Éüòâ"
            bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
            bot.send_message(
                chat_id=call.from_user.id,
                text=text,
                reply_markup=markup
            )

        elif action == "MENU":
            go_to_menu(call)
        elif action == "RETURN":
            call.data = 'SERVICE' + client.name_service
            choice_master(call)
    else:
        go_to_menu(call)


@bot.callback_query_handler(lambda call: call.data.startswith('TIME'))
def approve_record(call):
    print(f"Received call data: {call.data}")

    client = clear_dict.CLIENT_DICT.get(call.from_user.id)

    if client:
        print(f"Received call data: {call.data}")

        client.time_record = call.data[len('TIME'):]

        # Build the response text
        text = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n' \
               f'üõéÔ∏è –£—Å–ª—É–≥–∞: {client.name_service}\n' \
               f'üë§ –ú–∞—Å—Ç–µ—Ä: {client.name_master if client.name_master else "–õ—é–±–æ–π"}\n' \
               f'üìÖ –î–∞—Ç–∞: {client.date_record}\n' \
               f'üïì –í—Ä–µ–º—è: {client.time_record}'

        # Check if message content or markup is the same
        current_message = call.message.text
        current_markup = call.message.reply_markup

        if current_message != text or current_markup != create_markup_menu():
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data='APP_REC'))

            # Proceed with editing the message if content/markup has changed
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=text,
                                  reply_markup=markup)
        else:
            print("No changes detected, skipping edit.")
    else:
        go_to_menu(call)



@bot.callback_query_handler(func=lambda call: call.data.startswith('APP_REC'))
def set_time(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    """
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        id_client = get_client_id(call.message.chat.id, call.from_user.username)
        if client.set_time(id_client):  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            new_text = f'–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å!\n\n' \
                       f'üõéÔ∏è –£—Å–ª—É–≥–∞: {client.name_service}\n' \
                       f'üë§ –ú–∞—Å—Ç–µ—Ä: {client.name_master if client.name_master else "–õ—é–±–æ–π"}\n' \
                       f'üìÖ –î–∞—Ç–∞: {client.date_record}\n' \
                       f'üïì –í—Ä–µ–º—è: {client.time_record}'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if call.message.text != new_text:
                bot.edit_message_text(chat_id=call.from_user.id,
                                      message_id=call.message.message_id,
                                      text=new_text)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ñ–∏–¥–±—ç–∫
            bot.send_message(call.message.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üëç')
        else:
            bot.send_message(call.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.')
    else:
        go_to_menu(call)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é

@bot.callback_query_handler(func=lambda call: call.data == 'MENU')
def go_to_menu(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        print(f"Error deleting message: {e}")
    check_phone_number(call.message)



bot.infinity_polling()
